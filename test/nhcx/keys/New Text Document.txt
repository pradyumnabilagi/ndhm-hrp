To generate a private key and public certificate for npm `node-jose` for encryption and decryption, you can follow these steps using OpenSSL:

1. **Generate a Private Key:**
   Use OpenSSL to generate a private key in PEM format. You can adjust the key size (2048, 4096, etc.) as needed.

   ```bash
   openssl genrsa -out private_key.pem 2048
   ```

2. **Generate a Certificate Signing Request (CSR):**
   Create a CSR using the private key to generate a certificate. Replace `your_email@example.com` with your email address and adjust the other details as needed.

   ```bash
   openssl req -new -key private_key.pem -out csr.pem -subj "/C=US/ST=State/L=City/O=Organization/OU=Unit/CN=example.com/emailAddress=your_email@example.com"
   ```

3. **Self-Sign the Certificate (Optional, for Testing):**
   If you want to self-sign the certificate (not recommended for production), you can do so using the private key and CSR.

   ```bash
   openssl x509 -req -days 365 -in csr.pem -signkey private_key.pem -out public_cert.pem
   ```

4. **Export the Private Key and Public Certificate:**
   Export the private key and public certificate in the appropriate formats for `node-jose`. You may need to convert the formats to `pem` or `der` if required by `node-jose`.

   ```bash
   openssl pkcs8 -topk8 -inform PEM -outform PEM -nocrypt -in private_key.pem -out private_key_pkcs8.pem
   openssl x509 -in public_cert.pem -out public_cert.der -outform DER
   ```

After completing these steps, you should have the private key (`private_key_pkcs8.pem`) and public certificate (`public_cert.der` or `public_cert.pem`) ready for use with `node-jose` for encryption and decryption.